// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'https://webrtc-signaling-server-production-f6b7.up.railway.app/';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const roomInput = document.getElementById('roomInput');
const statusEl = document.getElementById('status');
const roomStatusEl = document.getElementById('roomStatus');
const userCountEl = document.getElementById('userCount');
const leaveBtn = document.getElementById('leaveBtn');
const videoBtn = document.getElementById('videoBtn');
const audioBtn = document.getElementById('audioBtn');
const connectionStatusEl = document.getElementById('connectionStatus');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket;
let localStream;
let remoteStream;
let peerConnection;
let currentRoom = null;
let isVideoEnabled = true;
let isAudioEnabled = true;
let isOfferer = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
let isTestingMic = false;
let testStream = null;
let echoAudio = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC
const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        {
            urls: 'turn:openrelay.metered.ca:80',
            username: 'openrelayproject',
            credential: 'openrelayproject'
        },
        {
            urls: 'turn:openrelay.metered.ca:443',
            username: 'openrelayproject',
            credential: 'openrelayproject'
        },
        {
            urls: 'turn:openrelay.metered.ca:443?transport=tcp',
            username: 'openrelayproject',
            credential: 'openrelayproject'
        }
    ],
    iceCandidatePoolSize: 10,
    bundlePolicy: 'max-bundle',
    rtcpMuxPolicy: 'require'
};


// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function () {
    const testMicBtn = document.getElementById('testMicBtn');
    if (testMicBtn) {
        testMicBtn.addEventListener('click', testMicrophoneWithVisualizer);
    }

    init();
});

async function init() {
    await initMediaStream();
    initSocket();
}

// ==================== –ú–ï–î–ò–ê –ü–û–¢–û–ö ====================

async function initMediaStream() {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...');

        localStream = await navigator.mediaDevices.getUserMedia({
            video: false,
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true,
                channelCount: 2,
                sampleRate: 44100,
                latency: 0.01
            }
        });

        console.log('‚úÖ –ú–µ–¥–∏–∞–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
        console.log('üé§ –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏:', localStream.getAudioTracks());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
            console.log('üîä –ê—É–¥–∏–æ —Ç—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω, enabled:', audioTracks[0].enabled);
            audioTracks[0].enabled = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º
        }

        localVideo.srcObject = localStream;
        updateStatus('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã', 'connected');

        return localStream;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:', error);

        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        switch (error.name) {
            case 'NotAllowedError':
                errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üîí —Å–ª–µ–≤–∞ –æ—Ç –∞–¥—Ä–µ—Å–∞ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø';
                break;
            case 'NotFoundError':
                errorMessage = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                break;
            case 'NotReadableError':
                errorMessage = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
                break;
            default:
                errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }

        updateStatus(errorMessage, 'disconnected');
        return null;
    }
}

// ==================== SOCKET.IO ====================

function initSocket() {
    socket = io(SERVER_URL);

    socket.on('connect', () => {
        updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', 'connected');
    });

    socket.on('disconnect', () => {
        updateStatus('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'disconnected');
    });

    socket.on('room-created', (roomId) => {
        currentRoom = roomId;
        roomStatusEl.textContent = roomId;
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`, 'connected');
        leaveBtn.disabled = false;
        isOfferer = true; // –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ñ—Ñ–µ—Ä–µ—Ä–æ–º
    });

    socket.on('room-joined', (data) => {
        currentRoom = data.roomId;
        roomStatusEl.textContent = data.roomId;
        updateStatus(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'connected');
        leaveBtn.disabled = false;
        isOfferer = false; // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–π—Å—è –±—É–¥–µ—Ç –∞–Ω—Å–≤–µ—Ä–æ–º
    });

    socket.on('room-not-found', (roomId) => {
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'disconnected');
    });

    socket.on('user-joined', async (data) => {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.userId}`);
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.userId}`, 'connected');

        // –ï—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (isOfferer) {
            await createPeerConnection();
            await createOffer();
        }
    });

    socket.on('user-left', (userId) => {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª: ${userId}`);
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª: ${userId}`, 'connected');

        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    });

    // WebRTC —Å–æ–±—ã—Ç–∏—è
    socket.on('webrtc-offer', async (data) => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ñ—Ñ–µ—Ä –æ—Ç:', data.from);
        await handleOffer(data);
    });

    socket.on('webrtc-answer', async (data) => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç:', data.from);
        await handleAnswer(data);
    });

    socket.on('webrtc-ice-candidate', async (data) => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', data.from);
        await handleIceCandidate(data);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    socket.on('stats-update', (data) => {
        userCountEl.textContent = data.users;
    });
}

// ==================== WEBRTC - –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ====================

async function createPeerConnection() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }

    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ localStream —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!localStream) {
        console.log('üîÑ localStream –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...');
        await initMediaStream();
    }

    console.log('üîÑ –°–æ–∑–¥–∞—é peer connection...');
    peerConnection = new RTCPeerConnection(configuration);

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    if (localStream) {
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    peerConnection.ontrack = (event) => {
        console.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫:', event.streams[0]);
        remoteStream = event.streams[0];
        remoteVideo.srcObject = remoteStream;

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ
        remoteVideo.volume = 1.0;
        remoteVideo.muted = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
        const audioTracks = remoteStream.getAudioTracks();
        console.log('üîä –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏:', audioTracks);
        if (audioTracks.length > 0) {
            audioTracks[0].enabled = true;
        }

        updateStatus('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'connected');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate && currentRoom) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
            socket.emit('webrtc-ice-candidate', {
                candidate: event.candidate,
                target: getOtherUsers()
            });
        }
    };

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    peerConnection.oniceconnectionstatechange = () => {
        const state = peerConnection.iceConnectionState;
        connectionStatusEl.textContent = `ICE: ${state}`;
        console.log(`ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);

        if (state === 'connected' || state === 'completed') {
            updateStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected');
        } else if (state === 'failed' || state === 'disconnected') {
            console.error('‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
            updateStatus('–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', 'disconnected');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            setTimeout(() => {
                if (currentRoom && peerConnection) {
                    console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
                    createPeerConnection().then(() => {
                        if (isOfferer) {
                            createOffer();
                        }
                    });
                }
            }, 2000);
        }
    };


    peerConnection.onsignalingstatechange = () => {
        console.log(`Signaling —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${peerConnection.signalingState}`);
    };

    peerConnection.onconnectionstatechange = () => {
        console.log(`Connection —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${peerConnection.connectionState}`);
    };

    return peerConnection;
}

async function createOffer() {
    try {
        if (!peerConnection) {
            await createPeerConnection();
        }

        console.log('üì§ –°–æ–∑–¥–∞—é –æ—Ñ—Ñ–µ—Ä...');
        const offer = await peerConnection.createOffer({
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        });

        console.log('‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é local description');
        await peerConnection.setLocalDescription(offer);

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ñ—Ñ–µ—Ä...');
        socket.emit('webrtc-offer', {
            offer: offer,
            target: getOtherUsers()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

async function handleOffer(data) {
    try {
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ñ—Ñ–µ—Ä...');

        if (!peerConnection) {
            await createPeerConnection();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (peerConnection.signalingState !== 'stable') {
            console.log('‚ö†Ô∏è Signaling state –Ω–µ stable, –∂–¥—É...');
            setTimeout(() => handleOffer(data), 1000);
            return;
        }

        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é remote description (offer)...');
        await peerConnection.setRemoteDescription(data.offer);

        console.log('üì§ –°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç...');
        const answer = await peerConnection.createAnswer();

        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é local description (answer)...');
        await peerConnection.setLocalDescription(answer);

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...');
        socket.emit('webrtc-answer', {
            answer: answer,
            target: data.from
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

async function handleAnswer(data) {
    try {
        if (!peerConnection) {
            console.error('‚ùå Peer connection –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'have-local-offer'
        if (peerConnection.signalingState !== 'have-local-offer') {
            console.log('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è answer:', peerConnection.signalingState);
            return;
        }

        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é remote description (answer)...');
        await peerConnection.setRemoteDescription(data.answer);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    }
}

async function handleIceCandidate(data) {
    try {
        if (peerConnection && data.candidate) {
            console.log('‚úÖ –î–æ–±–∞–≤–ª—è—é ICE –∫–∞–Ω–¥–∏–¥–∞—Ç...');
            await peerConnection.addIceCandidate(data.candidate);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–ê–ú–ò ====================

async function createRoom() {
    const roomId = Math.random().toString(36).substring(2, 8);
    roomInput.value = roomId;

    if (!localStream) {
        await initMediaStream();
    }

    socket.emit('create-room', roomId);
}

async function joinRoom() {
    const roomId = roomInput.value.trim();
    if (roomId) {
        if (!localStream) {
            await initMediaStream();
        }

        socket.emit('join-room', roomId);
    } else {
        alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
    }
}

function leaveRoom() {
    if (currentRoom) {
        socket.emit('leave-room', currentRoom);
        currentRoom = null;
        roomStatusEl.textContent = '–ù–µ—Ç';
        leaveBtn.disabled = true;
        updateStatus('–ü–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É', 'disconnected');

        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–î–ò–ê ====================

function toggleVideo() {
    if (localStream && localStream.getVideoTracks().length > 0) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            isVideoEnabled = videoTrack.enabled;
            videoBtn.textContent = isVideoEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ' : '–í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ';
        }
    }
}

function toggleAudio() {
    if (localStream && localStream.getAudioTracks().length > 0) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            isAudioEnabled = audioTrack.enabled;
            audioBtn.textContent = isAudioEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å audio' : '–í–∫–ª—é—á–∏—Ç—å audio';
        }
    }
}

// ==================== –¢–ï–°–¢ –ú–ò–ö–†–û–§–û–ù–ê ====================

async function testMicrophoneWithVisualizer() {
    if (!isTestingMic) {
        try {
            testStream = await navigator.mediaDevices.getUserMedia({
                audio: true,
                video: false
            });

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —ç—Ö–æ
            echoAudio = document.getElementById('echoAudio');
            echoAudio.srcObject = testStream;
            await echoAudio.play();

            isTestingMic = true;
            document.getElementById('testMicBtn').textContent = 'üîá –í—ã–∫–ª—é—á–∏—Ç—å —ç—Ö–æ';
            document.getElementById('testMicBtn').style.background = '#dc3545';
            updateStatus('–≠—Ö–æ –≤–∫–ª—é—á–µ–Ω–æ - –≥–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'connected');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            updateStatus(`–û—à–∏–±–∫–∞: ${error.message}`, 'disconnected');
        }
    } else {
        stopMicrophoneTest();
    }
}

function stopMicrophoneTest() {
    if (testStream) {
        testStream.getTracks().forEach(track => track.stop());
        testStream = null;
    }

    if (echoAudio) {
        echoAudio.pause();
        echoAudio.srcObject = null;
    }

    isTestingMic = false;
    document.getElementById('testMicBtn').textContent = 'üé§ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞';
    document.getElementById('testMicBtn').style.background = '#28a745';
    updateStatus('–≠—Ö–æ –≤—ã–∫–ª—é—á–µ–Ω–æ', 'disconnected');
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

function getOtherUsers() {
    return currentRoom;
}

function updateStatus(message, type) {
    statusEl.textContent = message;
    statusEl.className = type;
    console.log(`Status: ${message}`);
}

// –°–¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è HTML onclick
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.leaveRoom = leaveRoom;
window.toggleVideo = toggleVideo;
window.toggleAudio = toggleAudio;
window.stopMicrophoneTest = stopMicrophoneTest;
