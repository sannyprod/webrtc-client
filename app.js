// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'https://webrtc-signaling-server-production-f6b7.up.railway.app/';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const roomInput = document.getElementById('roomInput');
const statusEl = document.getElementById('status');
const roomStatusEl = document.getElementById('roomStatus');
const userCountEl = document.getElementById('userCount');
const leaveBtn = document.getElementById('leaveBtn');
const videoBtn = document.getElementById('videoBtn');
const audioBtn = document.getElementById('audioBtn');
const connectionStatusEl = document.getElementById('connectionStatus');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket;
let localStream;
let remoteStream;
let peerConnection;
let currentRoom = null;
let isVideoEnabled = true;
let isAudioEnabled = true;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC
const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
async function init() {
    await initMediaStream();
    initSocket();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞
async function initMediaStream() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: true, 
            audio: true 
        });
        localVideo.srcObject = localStream;
        updateStatus('–ú–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã', 'connected');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:', error);
        updateStatus('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'disconnected');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.io
function initSocket() {
    socket = io(SERVER_URL);
    
    socket.on('connect', () => {
        updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', 'connected');
    });
    
    socket.on('disconnect', () => {
        updateStatus('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'disconnected');
    });
    
    socket.on('room-created', (roomId) => {
        currentRoom = roomId;
        roomStatusEl.textContent = roomId;
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`, 'connected');
        leaveBtn.disabled = false;
    });
    
    socket.on('room-joined', (data) => {
        currentRoom = data.roomId;
        roomStatusEl.textContent = data.roomId;
        updateStatus(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'connected');
        leaveBtn.disabled = false;
        
        // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (data.users && data.users.length > 0) {
            data.users.forEach(userId => {
                createPeerConnection();
            });
        }
    });
    
    socket.on('room-not-found', (roomId) => {
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'disconnected');
    });
    
    socket.on('user-joined', (data) => {
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.userId}`, 'connected');
        createPeerConnection();
    });
    
    socket.on('user-left', (userId) => {
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª: ${userId}`, 'connected');
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    });
    
    // WebRTC —Å–æ–±—ã—Ç–∏—è
    socket.on('webrtc-offer', async (data) => {
        await handleOffer(data);
    });
    
    socket.on('webrtc-answer', async (data) => {
        await handleAnswer(data);
    });
    
    socket.on('webrtc-ice-candidate', async (data) => {
        await handleIceCandidate(data);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    socket.on('stats-update', (data) => {
        userCountEl.textContent = data.users;
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
function createRoom() {
    const roomId = Math.random().toString(36).substring(2, 8);
    roomInput.value = roomId;
    socket.emit('create-room', roomId);
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
function joinRoom() {
    const roomId = roomInput.value.trim();
    if (roomId) {
        socket.emit('join-room', roomId);
    } else {
        alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
    }
}

// –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
function leaveRoom() {
    if (currentRoom) {
        socket.emit('leave-room', currentRoom);
        currentRoom = null;
        roomStatusEl.textContent = '–ù–µ—Ç';
        leaveBtn.disabled = true;
        updateStatus('–ü–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É', 'disconnected');
        
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Peer Connection
function createPeerConnection() {
    if (peerConnection) {
        return; // –£–∂–µ —Å–æ–∑–¥–∞–Ω–æ
    }
    
    peerConnection = new RTCPeerConnection(configuration);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    peerConnection.ontrack = (event) => {
        remoteStream = event.streams[0];
        remoteVideo.srcObject = remoteStream;
        updateStatus('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'connected');
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            socket.emit('webrtc-ice-candidate', {
                candidate: event.candidate,
                target: getOtherUsers()
            });
        }
    };
    
    peerConnection.oniceconnectionstatechange = () => {
        connectionStatusEl.textContent = `ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${peerConnection.iceConnectionState}`;
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    createOffer();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
async function createOffer() {
    try {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        socket.emit('webrtc-offer', {
            offer: offer,
            target: getOtherUsers()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
async function handleOffer(data) {
    if (!peerConnection) {
        createPeerConnection();
    }
    
    try {
        await peerConnection.setRemoteDescription(data.offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        socket.emit('webrtc-answer', {
            answer: answer,
            target: data.from
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
async function handleAnswer(data) {
    try {
        await peerConnection.setRemoteDescription(data.answer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
async function handleIceCandidate(data) {
    try {
        await peerConnection.addIceCandidate(data.candidate);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
function getOtherUsers() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ broadcast –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    return currentRoom;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ
function toggleVideo() {
    if (localStream) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            isVideoEnabled = videoTrack.enabled;
            videoBtn.textContent = isVideoEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ' : '–í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ';
        }
    }
}

function toggleAudio() {
    if (localStream) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            isAudioEnabled = audioTrack.enabled;
            audioBtn.textContent = isAudioEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å audio' : '–í–∫–ª—é—á–∏—Ç—å audio';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, type) {
    statusEl.textContent = message;
    statusEl.className = type;
    console.log(`Status: ${message}`);
}

async function testMicrophoneOnly() {
    try {
        console.log('üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
        console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        updateStatus('–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–∞–º–µ—Ä—É...', 'connected');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        stream.getTracks().forEach(track => track.stop());
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        await initMediaStream();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
        updateStatus(`–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${error.message}`, 'disconnected');
    }
}

async function requestMediaPermissions() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            updateStatus('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º', 'disconnected');
            return;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioStream.getTracks().forEach(track => track.stop());
        
        updateStatus('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É —Ä–∞–∑—Ä–µ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...', 'connected');
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        await initMediaStream();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
        updateStatus('–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞', 'disconnected');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = init;