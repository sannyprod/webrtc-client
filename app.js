// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'https://webrtc-signaling-server-production-f6b7.up.railway.app/';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const roomInput = document.getElementById('roomInput');
const statusEl = document.getElementById('status');
const roomStatusEl = document.getElementById('roomStatus');
const userCountEl = document.getElementById('userCount');
const leaveBtn = document.getElementById('leaveBtn');
const videoBtn = document.getElementById('videoBtn');
const audioBtn = document.getElementById('audioBtn');
const connectionStatusEl = document.getElementById('connectionStatus');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket;
let localStream;
let remoteStream;
let peerConnection;
let currentRoom = null;
let isVideoEnabled = true;
let isAudioEnabled = true;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
let isTestingMic = false;
let testStream = null;
let echoAudio = null;
let audioContext = null;
let analyser = null;
let microphone = null;
let javascriptNode = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC
const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const testMicBtn = document.getElementById('testMicBtn');
    if (testMicBtn) {
        testMicBtn.addEventListener('click', testMicrophoneWithVisualizer);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    init();
});

async function init() {
    await initMediaStream();
    initSocket();
}

// ==================== –ú–ï–î–ò–ê –ü–û–¢–û–ö ====================

async function initMediaStream() {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...');
        
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: true, 
            audio: true 
        });
        
        console.log('‚úÖ –ú–µ–¥–∏–∞–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
        localVideo.srcObject = localStream;
        updateStatus('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã', 'connected');
        
        return localStream;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:', error);
        
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        switch(error.name) {
            case 'NotAllowedError':
                errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üîí —Å–ª–µ–≤–∞ –æ—Ç –∞–¥—Ä–µ—Å–∞ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø';
                break;
            case 'NotFoundError':
                errorMessage = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                break;
            case 'NotReadableError':
                errorMessage = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
                break;
            default:
                errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
        
        updateStatus(errorMessage, 'disconnected');
        return null;
    }
}

// ==================== SOCKET.IO ====================

function initSocket() {
    socket = io(SERVER_URL);
    
    socket.on('connect', () => {
        updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', 'connected');
    });
    
    socket.on('disconnect', () => {
        updateStatus('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'disconnected');
    });
    
    socket.on('room-created', (roomId) => {
        currentRoom = roomId;
        roomStatusEl.textContent = roomId;
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`, 'connected');
        leaveBtn.disabled = false;
    });
    
    socket.on('room-joined', (data) => {
        currentRoom = data.roomId;
        roomStatusEl.textContent = data.roomId;
        updateStatus(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'connected');
        leaveBtn.disabled = false;
        
        // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (data.users && data.users.length > 0) {
            data.users.forEach(userId => {
                createPeerConnection(true);
            });
        }
    });
    
    socket.on('room-not-found', (roomId) => {
        updateStatus(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'disconnected');
    });
    
    socket.on('user-joined', async (data) => {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.userId}`);
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.userId}`, 'connected');
        
        // –°–æ–∑–¥–∞–µ–º peer connection –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
        await createPeerConnection(true);
    });
    
    socket.on('user-left', (userId) => {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª: ${userId}`);
        updateStatus(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª: ${userId}`, 'connected');
        
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    });
    
    // WebRTC —Å–æ–±—ã—Ç–∏—è
    socket.on('webrtc-offer', async (data) => {
        await handleOffer(data);
    });
    
    socket.on('webrtc-answer', async (data) => {
        await handleAnswer(data);
    });
    
    socket.on('webrtc-ice-candidate', async (data) => {
        await handleIceCandidate(data);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    socket.on('stats-update', (data) => {
        userCountEl.textContent = data.users;
    });
}

// ==================== WEBRTC ====================

async function createPeerConnection(isInitiator = false) {
    if (peerConnection) {
        console.log('‚ö†Ô∏è Peer connection —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞—é —Å—Ç–∞—Ä—ã–π');
        peerConnection.close();
    }
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ localStream —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!localStream) {
        console.log('üîÑ localStream –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...');
        await initMediaStream();
    }
    
    console.log('üîÑ –°–æ–∑–¥–∞—é peer connection...');
    peerConnection = new RTCPeerConnection(configuration);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    if (localStream) {
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    peerConnection.ontrack = (event) => {
        console.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        remoteVideo.srcObject = remoteStream;
        updateStatus('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'connected');
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate && currentRoom) {
            socket.emit('webrtc-ice-candidate', {
                candidate: event.candidate,
                target: getOtherUsers()
            });
        }
    };
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    peerConnection.oniceconnectionstatechange = () => {
        const state = peerConnection.iceConnectionState;
        connectionStatusEl.textContent = `ICE: ${state}`;
        console.log(`ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
    };
    
    peerConnection.onsignalingstatechange = () => {
        console.log(`Signaling —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${peerConnection.signalingState}`);
    };
    
    // –ï—Å–ª–∏ –º—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä
    if (isInitiator) {
        setTimeout(() => {
            createOffer();
        }, 500);
    }
    
    return peerConnection;
}

async function createOffer() {
    try {
        if (!peerConnection) {
            console.error('‚ùå peerConnection –Ω–µ —Å–æ–∑–¥–∞–Ω');
            return;
        }
        
        console.log('üì§ –°–æ–∑–¥–∞—é –æ—Ñ—Ñ–µ—Ä...');
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        socket.emit('webrtc-offer', {
            offer: offer,
            target: getOtherUsers()
        });
        
        console.log('‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

async function handleOffer(data) {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ñ—Ñ–µ—Ä –æ—Ç:', data.from);
    
    if (!peerConnection) {
        await createPeerConnection(false);
    }
    
    try {
        await peerConnection.setRemoteDescription(data.offer);
        console.log('‚úÖ Remote description (offer) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        socket.emit('webrtc-answer', {
            answer: answer,
            target: data.from
        });
        
        console.log('üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞:', error);
    }
}

async function handleAnswer(data) {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç:', data.from);
    
    try {
        if (peerConnection) {
            await peerConnection.setRemoteDescription(data.answer);
            console.log('‚úÖ Remote description (answer) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    }
}

async function handleIceCandidate(data) {
    try {
        if (peerConnection && data.candidate) {
            await peerConnection.addIceCandidate(data.candidate);
            console.log('‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–ê–ú–ò ====================

async function createRoom() {
    const roomId = Math.random().toString(36).substring(2, 8);
    roomInput.value = roomId;
    
    if (!localStream) {
        await initMediaStream();
    }
    
    socket.emit('create-room', roomId);
}

async function joinRoom() {
    const roomId = roomInput.value.trim();
    if (roomId) {
        if (!localStream) {
            await initMediaStream();
        }
        
        socket.emit('join-room', roomId);
    } else {
        alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
    }
}

function leaveRoom() {
    if (currentRoom) {
        socket.emit('leave-room', currentRoom);
        currentRoom = null;
        roomStatusEl.textContent = '–ù–µ—Ç';
        leaveBtn.disabled = true;
        updateStatus('–ü–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É', 'disconnected');
        
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        remoteVideo.srcObject = null;
    }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–î–ò–ê ====================

function toggleVideo() {
    if (localStream && localStream.getVideoTracks().length > 0) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            isVideoEnabled = videoTrack.enabled;
            videoBtn.textContent = isVideoEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ' : '–í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ';
        }
    }
}

function toggleAudio() {
    if (localStream && localStream.getAudioTracks().length > 0) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            isAudioEnabled = audioTrack.enabled;
            audioBtn.textContent = isAudioEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å audio' : '–í–∫–ª—é—á–∏—Ç—å audio';
        }
    }
}

// ==================== –¢–ï–°–¢ –ú–ò–ö–†–û–§–û–ù–ê ====================

async function testMicrophoneWithVisualizer() {
    if (!isTestingMic) {
        try {
            testStream = await navigator.mediaDevices.getUserMedia({ 
                audio: true, 
                video: false 
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            document.getElementById('micTestPanel').style.display = 'block';
            
            // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–∞
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            microphone = audioContext.createMediaStreamSource(testStream);
            javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);
            
            analyser.smoothingTimeConstant = 0.8;
            analyser.fftSize = 1024;
            
            microphone.connect(analyser);
            analyser.connect(javascriptNode);
            javascriptNode.connect(audioContext.destination);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
            javascriptNode.onaudioprocess = function() {
                const array = new Uint8Array(analyser.frequencyBinCount);
                analyser.getByteFrequencyData(array);
                
                let values = 0;
                for (let i = 0; i < array.length; i++) {
                    values += array[i];
                }
                
                const average = values / array.length;
                const percentage = Math.min(100, (average / 256) * 100);
                
                document.getElementById('volumeLevel').style.width = percentage + '%';
                
                const volumeLevel = document.getElementById('volumeLevel');
                if (percentage < 30) {
                    volumeLevel.style.background = '#28a745';
                } else if (percentage < 70) {
                    volumeLevel.style.background = '#ffc107';
                } else {
                    volumeLevel.style.background = '#dc3545';
                }
            };
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —ç—Ö–æ
            echoAudio = document.getElementById('echoAudio');
            echoAudio.srcObject = testStream;
            await echoAudio.play();
            
            isTestingMic = true;
            updateStatus('–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å', 'connected');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            updateStatus(`–û—à–∏–±–∫–∞: ${error.message}`, 'disconnected');
        }
    } else {
        stopMicrophoneTest();
    }
}

function stopMicrophoneTest() {
    if (testStream) {
        testStream.getTracks().forEach(track => track.stop());
        testStream = null;
    }
    
    if (audioContext) {
        audioContext.close();
        audioContext = null;
    }
    
    if (echoAudio) {
        echoAudio.pause();
        echoAudio.srcObject = null;
    }
    
    document.getElementById('micTestPanel').style.display = 'none';
    isTestingMic = false;
    
    updateStatus('–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', 'disconnected');
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

function getOtherUsers() {
    return currentRoom;
}

function updateStatus(message, type) {
    statusEl.textContent = message;
    statusEl.className = type;
    console.log(`Status: ${message}`);
}

// –°–¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è HTML onclick
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.leaveRoom = leaveRoom;
window.toggleVideo = toggleVideo;
window.toggleAudio = toggleAudio;
window.stopMicrophoneTest = stopMicrophoneTest;